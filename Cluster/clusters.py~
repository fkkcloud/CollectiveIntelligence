from PIL import Image, ImageDraw
from math import sqrt

def readfile(filename):
    lines = [line for line in file(filename)]
    
    # First line is the column titles
    colnames = lines[0].strip().split('\t')[1:]
    rownames = []
    data = []
    for line in lines[1:]:
        p = line.strip().split('\t')
        # First column in each row is the rowname
        rownames.append(p[0])
        # The data for this row is the remainder of the row
        data.append([float(x) for x in p[1:]])
    return rownames, colnames, data

def pearson(v1, v2):
    sum1 = sum(v1)
    sum2 = sum(v2)
    sum1Sq = sum([pow(v, 2) for v in v1])
    sum2Sq = sum([pow(v, 2) for v in v2])
    pSum = sum([v1[i] * v2[i] for i in range(len(v1))])
    num=pSum-(sum1*sum2/len(v1))
    den=sqrt((sum1Sq-pow(sum1,2)/len(v1))*(sum2Sq-pow(sum2,2)/len(v1)))
    if den == 0:
        return 0

    return 1.0-num/den

class bicluster:
    def __init__(self, vec, left=None, right=None, distance=0.0, id=None):
        self.left = left
        self.right = right
        self.vec = vec
        self.id = id
        self.distance = distance

def hcluster(rows, distance=pearson):
    distances = {}
    currentclustid = -1

    # Clusters are initially just the rows
    clust = [bicluster(rows[i], id=i) for i in range(len(rows))]

    while len(clust) > 1:
        # reset the first and sendcond to start clustering
        lowestpair = (0,1)

        # reset the closest distance to be 1st and 2nd
        closest = distance(clust[0].vec, clust[1].vec)

        # loop through every pair looking for the smallest distance
        for i in range(len(clust)):
            for j in range(i+1, len(clust)): # watch for i+1
                # distances is the cache of distance calculations
                if (clust[i].id, clust[j].id) not in distances:
                    distances[(clust[i].id, clust[j].id)] = distance(clust[i].vec, clust[j].vec)

                d = distances[(clust[i].id, clust[j].id)]

                if d < closest:
                    closest = d
                    lowestpair = (i,j)

        # calculate the average of the two clusters
        mergevec = [ (clust[lowestpair[0]].vec[i]+clust[lowestpair[1]].vec[i])/2.0 for i in range(len(clust[0].vec))]
            
        # create the new cluster
        newcluster = bicluster(mergevec, left=clust[lowestpair[0]], right = clust[lowestpair[1]], distance=closest, id=currentclustid)

        # cluster ids that weren't in the original set are negative
        currentclustid -= 1
        del clust[lowestpair[1]]
        del clust[lowestpair[0]]
        clust.append(newcluster)
        # while loop ends

    # returning 1 clust that has everything
    return clust[0]
            

def printclust(clust, labels=None, n=0):
    # indent to make a hierarchy layout
    for i in range(n):
        print ' ',
    if clust.id < 0:
        # negative id means that this is branch
        print '-'
    else:
        # positive id means that this is an endpoint
        if labels == None:
            print clust.id
        else:
            print labels[clust.id]

    # now print the right and left branches
    if clust.left != None:
        printclust(clust.left, labels=labels, n=n+1)
    if clust.right != None:
        printclust(clust.right, labels=labels, n=n+1)


def getheight(clust):
    # Is this an endpoint? Then the height is just 1
    if clust.left == None and clust.right == None:
        return 1

    # Otherwise the height is the same of the heights of
    # each bramnch
    result = getheight(clust.left) + getheight(clust.right)
    print result
    return result

def getdepth(clust):
    # The distance of an endpoint is 0.0
    if clust.left == None and clust.right == None:
        return 0

    # The distance of a branch is the graeter of its two sides
    # plus its own distance
    return max(getdepth(clust.left), getdepth(clust.right))+clust.distance

def drawdendrogram(clust, labels, jpeg = 'clusters.jpg'):
    # height and width
    h = getheight(clust) * 20
    w = 1200
    depth = getdepth(clust)

    # width is fixed, so scale distances accoringly
    scaling = float(w-150)/depth

    # Create a new image with a white background
    img = Image.new('RGB', (w,h), (255,255,255))
    draw = ImageDraw.Draw(img)

    draw.line((0, h/2, 10, h/2), fill = (255, 0, 0))

    # Draw the first node
    drawnode(draw, clust, 10, (h/2), scaling, labels)
    img.save(jpeg, 'JPEG')

def drawnode(draw, clust, x, y, scaling, labels):
    if clust.id < 0:
        print 'node',clust.id
        h1 = getheight(clust.left) * 20
        h2 = getheight(clust.right) * 20
        top = y - (h1 + h2) / 2
        bottom = y + (h1 + h2) / 2
        # Line length
        ll = clust.distance * scaling
        # Vertical line from this cluster to children
        draw.line((x, top + h1/2, x, bottom - h2/2), fill = (255, 0, 0))
        
        # Horizontal line to left item
        draw.line((x, top + h1/2, x + ll, top + h1/2), fill = (255, 0, 0))

        # Horizontal line to right item
        draw.line((x, bottom - h2/2, x + ll, bottom - h2/2), fill = (255, 0, 0))
        draw.text((x,y), str(clust.id) , (0,200,0))
        draw.text((x,y-10), str(h1/2)+','+str(h2/2), (140,140,0))
        draw.text((x,y+10), str((clust.distance)*scaling), (0,140,140))
        # Call the function to draw the left and right nodes
        drawnode(draw, clust.left, x+ll, top+h1/2, scaling, labels)
        drawnode(draw, clust.right, x+ll, bottom-h2/2, scaling, labels)
    else:
        # If this is an endpoint, draw the item label
        print labels[clust.id]
        draw.text((x+5, y-7), labels[clust.id], (0,0,0))
        draw.text((x+5, y+3), str(clust.id), (140,0,140))

import random

def kcluster(rows, distance=pearson, k=4):
    # Determine the minimum values for each point
    ranges = []
    for i in range(len(rows[0])):
        minval = min([row[i] for row in rows])
        maxval = max([row[i] for row in rows])
        pair = (min, max)
        ranges.append(pair)

    # Create k randomly placed centroids
    clusters = []
    for i in range(k):
        tmp_list = []
        for j in range(len(rows[0])):
            minval = ranges[i][0]
            maxval = ranges[i][1]
            tmp_list.append(random.random() * (maxval - minval) + minval)
        clusters.append(tmp_list)

    lastmatches = None
    for t in range(100):
        print 'Iteration %d' % t
        bestmatches = [ [] for i in range(k) ]

        # Find which centroid is the closest for each row
        for j in range(len(rows)):
            row = rows[j]
            bestmatch = 0
            for i in range(k):
                d = distance(clusters[i], row)
                if d < distance(clusters[bestmatch], row):
                    bestmatch = i
            bestmatches[bestmatch].append(j)

        # If the results are the same as last time, this is complete
        if bestmatches == lastmatches:
            break
        lastmatches = bestmatches

    # Move the centroids to the average of their members
    for i in range(k):
        avgs = [0.0] * len(rows[0])
        if len(bestmatches[i]) > 0:
            for rowid in bestmatches[i]:
                for m in range(len(rows[rowid])):
                    avgs[m] += rows[rowid][m]
            for j in range(len(avgs)):
                avgs[j] /= len(bestmatches[i])
            clusters[i] = avgs

    return bestmatches

# Test
def main():
    blognames, words, data = readfile('blogdata.txt')
    clust = hcluster(data)
    drawdendrogram(clust, blognames, jpeg = 'blogclust.jpg')

if __name__ == '__main__':
    main()
